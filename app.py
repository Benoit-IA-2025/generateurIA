
import streamlit as st
import time
from langchain.llms import OpenAI
from langchain.prompts import PromptTemplate
import os

# Liste noire de mots techniques √† filtrer
mots_interdits = [
    "pandas", "docx", "pdfminer", "openpyxl", "imaplib", "smtplib",
    "requests", "BeautifulSoup", "sqlite3", "LangChain", "Ollama", "Mistral",
    "scikit-learn", "transformers", "spaCy",
    "OCR", "NLP", "scraping", "API", "token", "authentification", "JSON",
    "embedding", "LLM", "fine-tuning", "parsing", "workflow", "pipeline"
]

# CSS pour masquer la barre sup√©rieure
st.markdown("""
    <style>
    header {visibility: hidden;}
    </style>
""", unsafe_allow_html=True)

st.title("ü§ñ G√©n√©rateur d'agents IA")

st.markdown("""
D√©crivez clairement le processus, la t√¢che ou la pratique manag√©riale que vous souhaitez automatiser ou optimiser gr√¢ce √† un agent IA. 
Ce g√©n√©rateur vous fournit une architecture fonctionnelle claire et rigoureuse, qui vous permet de comprendre pr√©cis√©ment le fonctionnement de votre agent IA. 
Elle repose sur les quatre piliers de la m√©thode ARTS : Acc√®s, R√©cup√©ration, Traitement et Synth√®se. 
√Ä partir de cette architecture fonctionnelle, nous pourrons construire l‚Äôarchitecture technologique correspondante, en identifiant et en d√©ployant les outils les plus adapt√©s pour cr√©er des agents IA locaux, sur mesure et performants, tout en maintenant des co√ªts d‚Äôutilisation tr√®s faibles.
""")
# Initialisation du champ de saisie dans session_state
if "description" not in st.session_state:
    st.session_state.description = ""

if "reponse" not in st.session_state:
    st.session_state.reponse = ""

if "verrouiller" not in st.session_state:
    st.session_state.verrouiller = False

# Fonction de r√©initialisation
def reset_app():
    st.session_state.clear()
    st.rerun()

# Champ de saisie libre li√© au session_state
st.session_state.description = st.text_area("üìù D√©crivez ici l'agent souhait√©", value=st.session_state.description, height=200)

# Affichage du bouton uniquement si non verrouill√©
if not st.session_state.verrouiller:
    if st.button("üéØ G√©n√©rer l'architecture fonctionnelle"):
        if st.session_state.description.strip() == "":
            st.warning("Merci de d√©crire d'abord l‚Äôagent que vous souhaitez.")
        else:
            st.session_state.verrouiller = True
            st.rerun()

# Si verrou activ√© mais r√©ponse non encore g√©n√©r√©e ‚Üí lancer la g√©n√©ration
if st.session_state.verrouiller and not st.session_state.reponse:
    start_time = time.time()
    with st.spinner("‚è≥ L‚Äôarchitecture fonctionnelle est en cours d'√©laboration. Temps estim√© : environ 2 minutes."):
        template = PromptTemplate.from_template("""
Tu es un assistant en automatisation des processus client. √Ä partir de la description suivante, propose un plan clair structur√© selon la m√©thode ARTS :

- Acc√®s : o√π l‚Äôagent va chercher l‚Äôinformation (en termes simples)
- R√©cup√©ration : quelles informations l'agent extrait ou d√©tecte
- Traitement : ce que l‚Äôagent fait avec ces informations (analyse, tri, s√©lection...)
- Synth√®se : ce que l‚Äôagent produit ou restitue (tableau, r√©sum√©, alerte...)

Contraintes stylistiques :
- Adopte un langage qui √©voque les technologies avanc√©es d‚Äôintelligence artificielle sans jamais √™tre technique.
- Tu peux employer des expressions g√©n√©rales et suggestives li√©es √† l‚ÄôIA g√©n√©rative, aux agents intelligents, √† la restitution en langage naturel ou √† l‚Äôanalyse contextuelle.
- Inspire confiance par la clart√© et par une formulation professionnelle, en √©vitant les d√©tails sur les technologies, biblioth√®ques, langages de programmation ou outils utilis√©s.
- Tu ne dois jamais r√©p√©ter de mani√®re m√©canique une formule donn√©e : varie les tournures, adapte-les au contexte, reste fluide et naturel dans ta r√©daction.
- Utilise une grammaire fran√ßaise soign√©e. Le mot "agent" est masculin.
- R√©dige dans un fran√ßais correct, sans erreurs de genre.
- Adopte un ton professionnel et neutre. N‚Äôutilise pas de formules amicales, famili√®res ou personnalisantes comme ‚Äúmon ami‚Äù, ‚Äúvoici comment nous allons‚Äù, ‚Äúje vous propose‚Äù, etc.

Voici la demande du client :
"""
        + st.session_state.description +
        """
Propose le plan ARTS clair et lisible.
""")

        llm = OpenAI(openai_api_key=os.environ["OPENAI_API_KEY"])
        chain = template | llm
        st.session_state.reponse = chain.invoke({"description": st.session_state.description})
        elapsed = int(time.time() - start_time)
        st.info(f"‚úÖ Architecture g√©n√©r√©e en {elapsed} secondes.")

# Affichage du plan g√©n√©r√© et du bouton de r√©initialisation
if st.session_state.reponse:
    st.markdown("### üß± Plan ARTS g√©n√©r√©")
    st.markdown(st.session_state.reponse)
    if st.button("üîÅ Cr√©er un nouvel agent IA"):
        reset_app()
